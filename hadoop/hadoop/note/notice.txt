古代，人们用牛来拉木头，当一头牛拉不动圆木时候，他们不曾想过培育更大更壮的牛。同样，我们也不需要尝试
开发超级计算机，而应试着结合使用更多的计算机系统。
						———————————格雷斯。霍珀
使用Piper开发
	     优点 ：计算效率高。
	     缺点 ：社区支持比较差。
使用Streaming开发
	     优点 ： 方便，通用，但是对hdfs的控制较弱
	     缺点 ： 操作hdfs的文件，数据的接口少。
使用Hadoop的Java API 操作，
	     优点  ：  方便，通用，可以非常方便的管理hdfs文件系统。
	     缺点  ：  不能很好的和其他工具系统互通。
Hadoop 的一些特点：
HDFS文件系统的设计
(1).超大文件，超大文件在这里指具有几百MB，几百GB甚至几百TB大小的文件。目前已经有存储
PB级数据的Hadoop集群了。
(2).流式数据访问。
(3).商用硬件。
(4).低时间延迟的数据访问。
(5).大量的小文件
(6).多用户写入，任意修改文件
Hadoop客户端:客户端代表用户通过namenode和datanode交互来访问整个文件系统。客户端提供一个类似于POSIX(可移植操作
系统界面)的文件系统接口，因此用户在编程时无需知道namenode和datanode也可以实现其功能。
HDFS的文件访问权限
针对文件和目录，HDFS有与POSIX非常相似的权限模式。
一共提供三类权限模式：只读权限（r），写入权限（w）和可执行权限（x）
	每个文件和目录都有所属用户，所属组别（group）及模式（mode）。这个模式是由所属用户权
限，组内成员的权限及其他用户权限组成的。
	默认情况下，可以通过正在运行进程的用户名和组名来唯一确定客户端的标识。但是由于客户端
是远程的，任何用户都可以简单的在远程系统上以他的名义创建一个账户来进行访问。
Hadoop有一个抽象的文件系统概念，HDFS只是其中的一个实现。Java抽象类
org.apache.hadoop.fs.FileSystem 定义了Hadoop中的一个文件系统的接口，该抽象类有多个实现：
Hadoop使用Java写的，通过Java API 可以调用所有的Hadoop文件系统的交互操作。
Java 接口 与Hadoop的某系统进行交互的API，虽然我们关注的是HDFS的一个实例。
从Hadoop URL中获取数据，要从Hadoop文件系统中读取文件，最简单的方式就是使用java.net.URL对象打开
数据流，进而从中获取数据.
使用Hadoop存档工具
Hadooop存档是通过archive工具根据一组文件创建而来的。
Hadoop I/O 
HDFS的数据完整性
HDFS会对写入的所有数据计算校验和，并在读取数据时验证校验和。
序列化，所谓序列化，是指将结构化对象转化为字节流，以便在网络上传输或写到磁盘中进行永久保存。
数据块：每个磁盘都有默认的数据块大小，这是磁盘进行数据读/写的最小单位。构建于单个磁盘之上的
文件系统通过磁盘块来管理该文件系统的块，该文件系统块的大小可以是磁盘块的整数倍。文件系统块一
般为几千字节，而磁盘块一般为512字节。
HDFS 文件系统的接口：
Hadoop是用Java写的，通过Java api 可以调用所有Hadoop文件系统的交互操作，例如，文件系统的命令
解释器就是一个Java应用。
